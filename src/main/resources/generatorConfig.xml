<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<generatorConfiguration>
	<!-- 可以用于加载配置项或者配置文件，在整个配置文件中就可以使用${propertyKey}的方式来引用配置项
    	resource：配置资源加载地址，使用resource，MBG从classpath开始找        
    	url：配置资源加载地质，使用URL的方式，比如file:///C:/myfolder/generatorConfig.properties.
    	注意，两个属性只能选址一个;
    	另外，如果使用了mybatis-generator-maven-plugin，那么在pom.xml中定义的properties都可以直接在generatorConfig.xml中使用
	<properties resource="" url="" />
 	-->
    <properties resource="generator.properties"/>
    
    <!-- context:生成一组对象的环境 
    	id:必选，上下文id，用于在生成错误时提示
    	defaultModelType:指定生成对象的样式
        	1，conditional：类似hierarchical；
        	2，flat：所有内容（主键，blob）等全部生成在一个对象中；
        	3，hierarchical：主键生成一个XXKey对象(key class)，Blob等单独生成一个对象，其他简单属性在一个对象中(record class)
    	targetRuntime:
        	1，MyBatis3：默认的值，生成基于MyBatis3.x以上版本的内容，包括XXXBySample；
        	2，MyBatis3Simple：类似MyBatis3，只是不生成XXXBySample；
    	introspectedColumnImpl：类全限定名，用于扩展MBG
	-->
    <context id="MySqlContext" targetRuntime="MyBatis3Simple" defaultModelType="flat">
    
     	<!-- 自动识别数据库关键字，默认false，如果设置为true，根据SqlReservedWords中定义的关键字列表；
        	一般保留默认值，遇到数据库关键字（Java关键字），使用columnOverride覆盖
     	-->
    	<property name="autoDelimitKeywords" value="false"/>
    	
    	<!-- beginningDelimiter和endingDelimiter：指明数据库的用于标记数据库对象名的符号，比如ORACLE就是双引号，MYSQL默认是`反引号； -->
        <property name="beginningDelimiter" value="`"/>
        <property name="endingDelimiter" value="`"/>
        
        <!-- 生成的Java文件的编码 -->
        <property name="javaFileEncoding" value="UTF-8"/>
        
        <!-- 格式化java代码 -->
    	<property name="javaFormatter" value="org.mybatis.generator.api.dom.DefaultJavaFormatter"/>
    	
    	<!-- 格式化XML代码 -->
    	<property name="xmlFormatter" value="org.mybatis.generator.api.dom.DefaultXmlFormatter"/>
        
        <!-- 为模型生成序列化方法-->
        <plugin type="org.mybatis.generator.plugins.SerializablePlugin"/>
        <!-- 为生成的Java模型创建一个toString方法 -->
        <plugin type="org.mybatis.generator.plugins.ToStringPlugin"/>
        <!--生成mapper.xml时覆盖原文件-->
        <plugin type="org.mybatis.generator.plugins.UnmergeableXmlMappersPlugin" />
        <!--可以自定义生成model的代码注释-->
        <commentGenerator type="com.springboot.hirui.config.CommentGenerator">
            <!-- 是否去除自动生成的注释 true：是 ： false:否 -->
            <property name="suppressAllComments" value="true"/>
            <property name="suppressDate" value="true"/>
            <property name="addRemarkComments" value="true"/>
        </commentGenerator>
        <!--配置数据库连接-->
        <jdbcConnection driverClass="${jdbc.driverClass}"
                        connectionURL="${jdbc.connectionURL}"
                        userId="${jdbc.userId}"
                        password="${jdbc.password}">
            <!--解决mysql驱动升级到8.0后不生成指定数据库代码的问题-->
            <property name="nullCatalogMeansCurrent" value="true" />
        </jdbcConnection>

        <!-- 指定生成model的路径, java模型创建器，是必须要的元素
        	负责：1，key类（见context的defaultModelType）；2，java类；3，查询类
        	targetPackage：生成的类要放的包，真实的包受enableSubPackages属性控制；
        	targetProject：目标项目，指定一个存在的目录下，生成的内容会放到指定目录中，如果目录不存在，MBG不会自动建目录
     	-->
        <javaModelGenerator targetPackage="com.springboot.hirui.pojo" targetProject="src\main\java"/>

        <!-- 指定生成mapper.xml的路径,生成SQL map的XML文件生成器，
        	注意，在Mybatis3之后，我们可以使用mapper.xml文件+Mapper接口（或者不用mapper接口），
           	 或者只使用Mapper接口+Annotation，所以，如果 javaClientGenerator配置中配置了需要生成XML的话，这个元素就必须配置
        	targetPackage/targetProject:同javaModelGenerator
     	-->
        <sqlMapGenerator targetPackage="mapper" targetProject="src\main\resources"/>

        <!-- 指定生成mapper接口的的路径, 对于mybatis来说，即生成Mapper接口，注意，如果没有配置该元素，那么默认不会生成Mapper接口 
        targetPackage/targetProject:同javaModelGenerator
        type：选择怎么生成mapper接口（在MyBatis3/MyBatis3Simple下）：
            1，ANNOTATEDMAPPER：会生成使用Mapper接口+Annotation的方式创建（SQL生成在annotation中），不会生成对应的XML；
            2，MIXEDMAPPER：使用混合配置，会生成Mapper接口，并适当添加合适的Annotation，但是XML会生成在XML中；
            3，XMLMAPPER：会生成Mapper接口，接口完全依赖XML；
        	注意，如果context是MyBatis3Simple：只支持ANNOTATEDMAPPER和XMLMAPPER
    	-->
        <javaClientGenerator type="XMLMAPPER" targetPackage="com.springboot.hirui.mapper"
                             targetProject="src\main\java"/>
                             
        <!--生成全部表tableName设为%-->
        <table tableName="product">
            <generatedKey column="id" sqlStatement="MySql" identity="true"/>
        </table>
    </context>
</generatorConfiguration>